section .data
msg:	db 0xa, 0xa, 0x20, 0x54, 0x69, 0x6e, 0x79, 0x20, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x9, 0x20, 0x61, 0x9, 0x9, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xa, 0x9, 0x20, 0x6d, 0x9, 0x9, 0x20, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xa, 0x9, 0x20, 0x75, 0x9, 0x9, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xa, 0x9, 0x20, 0x64, 0x9, 0x9, 0x20, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xa, 0x9, 0x20, 0x70, 0x9, 0x9, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xa, 0x9, 0x20, 0x72, 0x9, 0x9, 0x20, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xa, 0x9, 0x20, 0x73, 0x9, 0x9, 0x20, 0x53, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xa, 0x9, 0x20, 0x63, 0x9, 0x9, 0x20, 0x43, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xa, 0x9, 0x20, 0x74, 0x9, 0x9, 0x20, 0x54, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xa, 0x9, 0x20, 0x68, 0x9, 0x9, 0x20, 0x48, 0x65, 0x6c, 0x70, 0xa, 0x9, 0x20, 0x65, 0x9, 0x9, 0x20, 0x45, 0x78, 0x69, 0x74, 0xa, 0xa, 0xa
ask:	db 0x45, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x59, 0x6f, 0x75, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x20
str:	times 100 db 0
msgNo:	db	"no"
msgYes:	db	"yes"
wronginput: db "Wrong Input!", 0xa
biginput: db "Big Input!", 0xa
number1: times 100 db 0
number2: times 100 db 0
enterNumber db 'Enter a number : ', 10, 0
enterNumberlen equ $ -enterNumber
wrongSumMsg: db "Wrong Sum!", 0xa
rightSumMsg: db "Correct Sum!", 0xa
section .bss
digitNumber  resb 1
dnumber1 resd 1
dnumber2 resd 1
length	resd 1
section .text
global _start
_start:
mov		eax, 4
mov		ebx, 1
mov		ecx, msg
mov		edx, 335
int		0x80
jmp		loop
jmp		exit
loop:
mov		eax, 4
mov		ebx, 1
mov		ecx, ask
mov		edx, 17
int		0x80
mov		eax, 3
mov		ebx, 0
mov		ecx, str
; mov		edx, 1
mov		edx, 100
int		0x80
mov		[length], eax
; mov		eax, 4
; mov		ebx, 1
; mov		ecx, str
; mov		edx, [length]
; ; mov		edx, 1
; int		0x80
; cmp	str, 0x65
; ja exit
mov 	al, [length]
cmp 	al, 2
je 		switch_check
jne switch_wrong
switch_check:
mov		al, [str]
or		al, 20h
cmp		al, "a"
je		switch_add
cmp		al, "m"
je		switch_sub
cmp		al, "u"
je		switch_mul
cmp		al, "d"
je		switch_div
cmp		al, "p"
je		switch_power
cmp		al, "r"
je		switch_squar
cmp		al, "s"
je		switch_sine
cmp		al, "c"
je		switch_cosine
cmp		al, "t"
je		switch_tangent
cmp		al, "h"
je		switch_help
cmp		al, "e"
je		exit
jmp switch_wrong
switch_wrong:
mov		eax, 4
mov		ebx, 1
mov		ecx, wronginput
mov		edx, 13
int		0x80
jmp loop
switch_big:
mov		eax, 4
mov		ebx, 1
mov		ecx, biginput
mov		edx, 11
int		0x80
jmp loop
yes:
mov		eax, 4
mov		ebx, 1
mov		ecx, msgYes
mov		edx, 3
int		0x80
jmp loop
no:
mov		eax, 4
mov		ebx, 1
mov		ecx, msgNo
mov		edx, 2
int		0x80
jmp loop
switch_add:
mov     eax, 4
mov     ebx, 1
mov     edx, enterNumber
mov     ecx, enterNumberlen
int		0x80
mov		eax, 3
mov		ebx, 0
mov		ecx, number1
; mov		edx, 1
mov		edx, 100
int		0x80
mov		[digitNumber], eax
mov     esi, number1
movzx   ecx, byte [digitNumber]
xor     ebx,ebx    ; clear ebx
call    string_to_int
mov     dword [dnumber1], eax
mov     eax, 4
mov     ebx, 1
mov     edx, enterNumber
mov     ecx, enterNumberlen
int		0x80
mov		eax, 3
mov		ebx, 0
mov		ecx, number2
; mov		edx, 1
mov		edx, 100
int		0x80
mov		[digitNumber], eax
mov     rax, number2
call	str_to_int
mov	r10, rax
; mov 	al, data1
; add 	al, data2
mov rax, dnumber1
mov rbx, dnumber2
add rax, rbx
cmp rax, 10
je .rightSum
jmp .wrongSum
.wrongSum:
mov		eax, 4
mov		ebx, 1
mov		ecx, wrongSumMsg
mov		edx, 11
int		0x80
jmp loop
.rightSum:
mov		eax, 4
mov		ebx, 1
mov		ecx, rightSumMsg
mov		edx, 13
int		0x80
jmp loop
switch_mul:
jmp loop
switch_sub:
jmp loop
switch_div:
jmp loop
switch_power:
jmp loop
switch_squar:
jmp loop
switch_sine:
jmp loop
switch_cosine:
jmp loop
switch_tangent:
jmp loop
switch_help:
mov		eax, 4
mov		ebx, 1
mov		ecx, msg
mov		edx, 335
int		0x80
jmp loop
exit:
mov		rax, 60
mov		rdi, 0
syscall
str_to_int:
xor	rax, rax
mov	rcx,  10
